syntax = "proto3";

package analysis.v1;

import "google/api/annotations.proto";

option go_package = "github.com/toheart/goanalysis/api/analysis/v1;v1";

// The greeting service definition.
service Analysis {
  // Sends a greeting
  rpc GetAnalysis (AnalysisRequest) returns (AnalysisReply) {
    option (google.api.http) = {
      get: "/analysis/{name}"
    };
  }

  rpc GetAnalysisByGID (AnalysisByGIDRequest) returns (AnalysisByGIDReply) {
    option (google.api.http) = {
      get: "/api/traces/{gid}"
    };
  }

  rpc GetAllGIDs (GetAllGIDsReq) returns (GetAllGIDsReply) {
    option (google.api.http) = {
      get: "/api/gids"
    };
  }
  rpc GetParamsByID (GetParamsByIDReq) returns (GetParamsByIDReply) {
    option (google.api.http) = {
      get: "/api/params/{id}"
    };
  }
  rpc GenerateImage (GenerateImageReq) returns (GenerateImageReply) {
    option (google.api.http) = {
      get: "/api/traces/{gid}/mermaid"
    };
  }

  rpc GetAllFunctionName (GetAllFunctionNameReq) returns (GetAllFunctionNameReply) {
    option (google.api.http) = {
      get: "/api/functions"
    };
  }
  rpc GetGidsByFunctionName (GetGidsByFunctionNameReq) returns (GetGidsByFunctionNameReply) {
    option (google.api.http) = {
      post: "/api/gids/function"
      body: "*"
    };
  }
  rpc VerifyProjectPath (VerifyProjectPathReq) returns (VerifyProjectPathReply) {
    option (google.api.http) = {
      post: "/api/verify/path"
      body: "*"
    };
  }

  // CheckDatabase checks if the trace database exists
  rpc CheckDatabase(CheckDatabaseRequest) returns (CheckDatabaseResponse) {
    option (google.api.http) = {
      get: "/api/check/db"
    };
  }

  rpc GetTraceGraph(GetTraceGraphReq) returns (GetTraceGraphReply) {
    option (google.api.http) = {
      get: "/api/traces/{gid}/graph"
    };
  }
}


message VerifyProjectPathReq {
  string path = 1;
}

message VerifyProjectPathReply {
  bool verified = 1;
}

message GetGidsByFunctionNameReq {
  string functionName = 1;
}

message GetGidsByFunctionNameReply {
    message Body{
    uint64 gid = 1;
    string initialFunc = 2;
  }
  repeated Body body = 1;
  int32 total = 2; // 总的 GID 数量
}

message GetAllFunctionNameReq {
}

message GetAllFunctionNameReply {
  repeated string functionNames = 1;
}

message GenerateImageReq {
  string gid = 1;
}

message GenerateImageReply {
  string image = 1;
} 

// The request message containing the user's name.
message AnalysisRequest {
  string name = 1;
}

// The response message containing the greetings
message AnalysisReply {
  string message = 1;
}

message AnalysisByGIDRequest {
  string gid = 1;
}

message TraceParams {
  int32 pos = 1;
  string param = 2;
}

message AnalysisByGIDReply {
message TraceData {
  int32 id = 1;
  string name = 2;
  int32 gid = 3;
  int32 indent = 4;
  repeated TraceParams params = 5;
  int32 paramCount = 6;
  string timeCost = 7;
}
  repeated TraceData trace_data = 1;
}

message GetAllGIDsReq {
  int32 page = 1; // 当前页
  int32 limit = 2; // 每页条目数
}

message GetAllGIDsReply {
  message Body{
    uint64 gid = 1;
    string initialFunc = 2;
  }
  repeated Body body = 1;
  int32 total = 2; // 总的 GID 数量
}

message GetParamsByIDReq {
  int32 id = 1;
}

message GetParamsByIDReply {
  repeated TraceParams params = 1;
}

message CheckDatabaseRequest {}

message CheckDatabaseResponse {
  bool exists = 1;
}

message GraphNode {
  string id = 1;
  string name = 2;
  int32 call_count = 3;
}

message GraphEdge {
  string source = 1;
  string target = 2;
  string label = 3;
}

message GetTraceGraphReq {
  string gid = 1;
}

message GetTraceGraphReply {
  repeated GraphNode nodes = 1;
  repeated GraphEdge edges = 2;
}
