// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: staticanalysis/v1/staticanalysis.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStaticAnalysisAnalyzeDbFile = "/staticanalysis.v1.StaticAnalysis/AnalyzeDbFile"
const OperationStaticAnalysisAnalyzeProjectPath = "/staticanalysis.v1.StaticAnalysis/AnalyzeProjectPath"
const OperationStaticAnalysisGetFunctionAnalysis = "/staticanalysis.v1.StaticAnalysis/GetFunctionAnalysis"
const OperationStaticAnalysisGetFunctionCallGraph = "/staticanalysis.v1.StaticAnalysis/GetFunctionCallGraph"
const OperationStaticAnalysisGetHotFunctions = "/staticanalysis.v1.StaticAnalysis/GetHotFunctions"
const OperationStaticAnalysisGetStaticDbFiles = "/staticanalysis.v1.StaticAnalysis/GetStaticDbFiles"

type StaticAnalysisHTTPServer interface {
	// AnalyzeDbFile 分析指定数据库文件
	AnalyzeDbFile(context.Context, *AnalyzeDbFileRequest) (*AnalyzeDbFileResponse, error)
	// AnalyzeProjectPath 分析指定路径的项目并生成callgraph
	AnalyzeProjectPath(context.Context, *AnalyzeProjectPathRequest) (*AnalyzeProjectPathResponse, error)
	// GetFunctionAnalysis 获取函数调用关系分析
	GetFunctionAnalysis(context.Context, *GetFunctionAnalysisReq) (*GetFunctionAnalysisReply, error)
	// GetFunctionCallGraph 获取函数调用关系图
	GetFunctionCallGraph(context.Context, *GetFunctionCallGraphReq) (*GetFunctionCallGraphReply, error)
	// GetHotFunctions 获取热点函数分析数据
	GetHotFunctions(context.Context, *GetHotFunctionsReq) (*GetHotFunctionsReply, error)
	// GetStaticDbFiles 获取静态分析数据库文件列表
	GetStaticDbFiles(context.Context, *GetStaticDbFilesRequest) (*GetStaticDbFilesResponse, error)
}

func RegisterStaticAnalysisHTTPServer(s *http.Server, srv StaticAnalysisHTTPServer) {
	r := s.Route("/")
	r.GET("/api/static/dbfiles", _StaticAnalysis_GetStaticDbFiles1_HTTP_Handler(srv))
	r.POST("/api/static/analyze/path", _StaticAnalysis_AnalyzeProjectPath1_HTTP_Handler(srv))
	r.POST("/api/static/analyze", _StaticAnalysis_AnalyzeDbFile1_HTTP_Handler(srv))
	r.GET("/api/static/hot-functions", _StaticAnalysis_GetHotFunctions1_HTTP_Handler(srv))
	r.POST("/api/static/function/analysis", _StaticAnalysis_GetFunctionAnalysis1_HTTP_Handler(srv))
	r.GET("/api/static/function/graph", _StaticAnalysis_GetFunctionCallGraph2_HTTP_Handler(srv))
	r.GET("/api/static/function/{function_name}/graph", _StaticAnalysis_GetFunctionCallGraph3_HTTP_Handler(srv))
}

func _StaticAnalysis_GetStaticDbFiles1_HTTP_Handler(srv StaticAnalysisHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStaticDbFilesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStaticAnalysisGetStaticDbFiles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStaticDbFiles(ctx, req.(*GetStaticDbFilesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStaticDbFilesResponse)
		return ctx.Result(200, reply)
	}
}

func _StaticAnalysis_AnalyzeProjectPath1_HTTP_Handler(srv StaticAnalysisHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AnalyzeProjectPathRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStaticAnalysisAnalyzeProjectPath)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AnalyzeProjectPath(ctx, req.(*AnalyzeProjectPathRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AnalyzeProjectPathResponse)
		return ctx.Result(200, reply)
	}
}

func _StaticAnalysis_AnalyzeDbFile1_HTTP_Handler(srv StaticAnalysisHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AnalyzeDbFileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStaticAnalysisAnalyzeDbFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AnalyzeDbFile(ctx, req.(*AnalyzeDbFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AnalyzeDbFileResponse)
		return ctx.Result(200, reply)
	}
}

func _StaticAnalysis_GetHotFunctions1_HTTP_Handler(srv StaticAnalysisHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHotFunctionsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStaticAnalysisGetHotFunctions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHotFunctions(ctx, req.(*GetHotFunctionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHotFunctionsReply)
		return ctx.Result(200, reply)
	}
}

func _StaticAnalysis_GetFunctionAnalysis1_HTTP_Handler(srv StaticAnalysisHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFunctionAnalysisReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStaticAnalysisGetFunctionAnalysis)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFunctionAnalysis(ctx, req.(*GetFunctionAnalysisReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFunctionAnalysisReply)
		return ctx.Result(200, reply)
	}
}

func _StaticAnalysis_GetFunctionCallGraph2_HTTP_Handler(srv StaticAnalysisHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFunctionCallGraphReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStaticAnalysisGetFunctionCallGraph)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFunctionCallGraph(ctx, req.(*GetFunctionCallGraphReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFunctionCallGraphReply)
		return ctx.Result(200, reply)
	}
}

func _StaticAnalysis_GetFunctionCallGraph3_HTTP_Handler(srv StaticAnalysisHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFunctionCallGraphReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStaticAnalysisGetFunctionCallGraph)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFunctionCallGraph(ctx, req.(*GetFunctionCallGraphReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFunctionCallGraphReply)
		return ctx.Result(200, reply)
	}
}

type StaticAnalysisHTTPClient interface {
	AnalyzeDbFile(ctx context.Context, req *AnalyzeDbFileRequest, opts ...http.CallOption) (rsp *AnalyzeDbFileResponse, err error)
	AnalyzeProjectPath(ctx context.Context, req *AnalyzeProjectPathRequest, opts ...http.CallOption) (rsp *AnalyzeProjectPathResponse, err error)
	GetFunctionAnalysis(ctx context.Context, req *GetFunctionAnalysisReq, opts ...http.CallOption) (rsp *GetFunctionAnalysisReply, err error)
	GetFunctionCallGraph(ctx context.Context, req *GetFunctionCallGraphReq, opts ...http.CallOption) (rsp *GetFunctionCallGraphReply, err error)
	GetHotFunctions(ctx context.Context, req *GetHotFunctionsReq, opts ...http.CallOption) (rsp *GetHotFunctionsReply, err error)
	GetStaticDbFiles(ctx context.Context, req *GetStaticDbFilesRequest, opts ...http.CallOption) (rsp *GetStaticDbFilesResponse, err error)
}

type StaticAnalysisHTTPClientImpl struct {
	cc *http.Client
}

func NewStaticAnalysisHTTPClient(client *http.Client) StaticAnalysisHTTPClient {
	return &StaticAnalysisHTTPClientImpl{client}
}

func (c *StaticAnalysisHTTPClientImpl) AnalyzeDbFile(ctx context.Context, in *AnalyzeDbFileRequest, opts ...http.CallOption) (*AnalyzeDbFileResponse, error) {
	var out AnalyzeDbFileResponse
	pattern := "/api/static/analyze"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStaticAnalysisAnalyzeDbFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StaticAnalysisHTTPClientImpl) AnalyzeProjectPath(ctx context.Context, in *AnalyzeProjectPathRequest, opts ...http.CallOption) (*AnalyzeProjectPathResponse, error) {
	var out AnalyzeProjectPathResponse
	pattern := "/api/static/analyze/path"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStaticAnalysisAnalyzeProjectPath))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StaticAnalysisHTTPClientImpl) GetFunctionAnalysis(ctx context.Context, in *GetFunctionAnalysisReq, opts ...http.CallOption) (*GetFunctionAnalysisReply, error) {
	var out GetFunctionAnalysisReply
	pattern := "/api/static/function/analysis"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStaticAnalysisGetFunctionAnalysis))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StaticAnalysisHTTPClientImpl) GetFunctionCallGraph(ctx context.Context, in *GetFunctionCallGraphReq, opts ...http.CallOption) (*GetFunctionCallGraphReply, error) {
	var out GetFunctionCallGraphReply
	pattern := "/api/static/function/{function_name}/graph"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStaticAnalysisGetFunctionCallGraph))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StaticAnalysisHTTPClientImpl) GetHotFunctions(ctx context.Context, in *GetHotFunctionsReq, opts ...http.CallOption) (*GetHotFunctionsReply, error) {
	var out GetHotFunctionsReply
	pattern := "/api/static/hot-functions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStaticAnalysisGetHotFunctions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StaticAnalysisHTTPClientImpl) GetStaticDbFiles(ctx context.Context, in *GetStaticDbFilesRequest, opts ...http.CallOption) (*GetStaticDbFilesResponse, error) {
	var out GetStaticDbFilesResponse
	pattern := "/api/static/dbfiles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStaticAnalysisGetStaticDbFiles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
